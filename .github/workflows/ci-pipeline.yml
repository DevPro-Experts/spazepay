name: CI Pipeline

# Trigger the workflow on pushes and pull requests to main and develop branches
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Ensure only one run per PR/branch at a time, canceling in-progress runs
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Set up PostgreSQL service for integration tests
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: spazepay_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Debug: Print branch and event details
      - name: Debug trigger info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"

      # Set up JDK 21 (based on your local logs)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Override Spring datasource properties for PostgreSQL in application-test.yml
      - name: Configure test properties
        run: |
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.yml <<EOF
          spring:
            datasource:
              url: jdbc:postgresql://localhost:5432/spazepay_test
              username: testuser
              password: testpass
            jpa:
              hibernate:
                ddl-auto: create-drop
            profiles:
              active: test
          EOF

      # Build and run tests with Maven
      - name: Build and test
        run: mvn -B clean test -Ptest

      # Upload test results as an artifact (optional)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/